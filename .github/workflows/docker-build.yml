name: docker-build

on:
  push:
    branches: [ master, qa, live, old-master, old-qa, old-live ]
  pull_request:
    branches: [ master, old-master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  calculate_branches:
    runs-on: ubuntu-latest
    steps:
      - name: Check out current branch
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0  # All history for all tags and branches, since branch calculation step needs that

      - name: Calculate branches to build
        run: |
          echo "${GITHUB_REF}"
          ./calculate-branches.sh | grep FW.Branch >> "${GITHUB_ENV}"

      - name: Save branch names in output
        id: branches_to_build
        run: |
          echo "FW8Branch=${FW8Branch}"
          echo "FW9Branch=${FW9Branch}"
          echo "::set-output name=FW8Branch::${FW8Branch}"
          echo "::set-output name=FW9Branch::${FW9Branch}"

    outputs:
      FW8Branch: ${{ steps.branches_to_build.outputs.FW8Branch }}
      FW9Branch: ${{ steps.branches_to_build.outputs.FW9Branch }}

  build:
    runs-on: ubuntu-latest
    needs: calculate_branches

    # As of 2021-11-24, we build LfMerge for LCM DB versions 68-72 (and there is no 71)
    strategy:
      matrix:
        dbversion: [7000068, 7000069, 7000070, 7000072]
        distro: [ 'bionic' ]

    steps:
      - name: Check out FW8 branch
        uses: actions/checkout@v2.4.0
        if: matrix.dbversion < 7000072
        with:
          ref: ${{ needs.calculate_branches.outputs.FW8Branch }}
          fetch-depth: 0  # All history for all tags and branches, since GitVersion needs that

      - name: Check out FW9 branch
        uses: actions/checkout@v2.4.0
        if: matrix.dbversion >= 7000072
        with:
          ref: ${{ needs.calculate_branches.outputs.FW9Branch }}
          fetch-depth: 0  # All history for all tags and branches, since GitVersion needs that

      - name: Verify current branch
        run: |
          git branch --contains HEAD --format '%(refname)'
          echo FW8 was "${FW8Branch}"
          echo FW9 was "${FW9Branch}"
        env:
          FW8Branch: ${{ needs.calculate_branches.outputs.FW8Branch }}
          FW9Branch: ${{ needs.calculate_branches.outputs.FW9Branch }}

      - name: Calculate version number
        id: version
        env:
          BUILD_NUMBER: ${{ github.run_number }}
        run: |
          echo Start
          REV=${GITHUB_REF:-$(git rev-parse --symbolic-full-name HEAD)}
          DESCRIBE=$(git describe --long --match "v*")
          MAJOR=$(echo "$DESCRIBE" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+).*$/\1/')
          MINOR=$(echo "$DESCRIBE" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+).*$/\2/')
          PATCH=$(echo "$DESCRIBE" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+).*$/\3/')
          # TODO: Detect need for minor/major updates and increment those instead of PATCH
          COMMIT_COUNT=$(echo "$DESCRIBE" | sed -E 's/^[^-]+-([^-]+)-.*$/\1/')
          COMMIT_HASH=$(echo "$DESCRIBE" | sed -E 's/^[^-]+-[^-]+-g(.*)$/\1/')
          if [ -n "$COMMIT_COUNT" -a "$COMMIT_COUNT" -gt 0 ]; then
            # If we're building from a tagged version, rebuild precisely that version
            PATCH=$((${PATCH} + 1))
          fi
          MajorMinorPatch="${MAJOR}.${MINOR}.${PATCH}"
          AssemblySemVer="${MajorMinorPatch}.${BUILD_NUMBER}"
          AssemblySemFileVer="${MajorMinorPatch}.0"
          InformationalVersion="${DESCRIBE}"
          echo "Calculating name from ${REV}"
          if [ -z ${REV} ]; then
            echo Failed to get a meaningful commit name
          fi
          echo Got commit name ${REV}
          RESULT=notfound
          if echo "${REV}" | grep -E '^refs/pull/'; then
            echo Found PR
            RESULT=$(echo "${REV}" | sed -E 's/^refs\/pull\/([0-9]+)\/merge/\1/')
          fi
          if echo "${REV}" | grep -E '^refs/heads/'; then
            echo Found branch
            RESULT=$(echo "${REV}" | sed -E 's/^refs\/heads\///')
          fi
          if echo "${REV}" | grep -E '^refs/tags/'; then
            echo Found tag
            RESULT=$(echo "${REV}" | sed -E 's/^refs\/tags\///')
          fi
          echo Will calculate version from "${RESULT}" and "${MAJOR}.${MINOR}.${PATCH} with $COMMIT_COUNT commits since then, and current hash $COMMIT_HASH"

          case "$REV" in
            refs/heads/master | refs/heads/old-master)
              PRERELEASE="~alpha.${BUILD_NUMBER}"
              ;;

            refs/heads/qa | refs/heads/old-qa)
              PRERELEASE="~beta.${BUILD_NUMBER}"
              ;;

            refs/heads/live | refs/heads/old-live)
              PRERELEASE=
              ;;

            refs/pull/*)
              PR_NUMBER=$(echo "${REV}" | sed -E 's/^refs\/pull\/([0-9]+)\/merge/\1/')
              PRERELEASE="~PR${PR_NUMBER}.${BUILD_NUMBER}"
              ;;

            refs/heads/*)
              BRANCH=$(echo "${REV##refs/heads/}" | sed 's/\//-/')
              PRERELEASE="~${BRANCH}.${BUILD_NUMBER}"
              ;;

            *)
              echo "Could not determine version number from ${REV}"
              echo "::error ::Could not determine version number from ${REV}"
              exit 1

          esac
          DebPackageVersion=${MAJOR}.${MINOR}.${PATCH}${PRERELEASE}
          MsBuildVersion=$(echo "${DebPackageVersion}" | sed 's/~/-/')
          echo "Will build package version ${DebPackageVersion}"
          echo "::set-output name=DebPackageVersion::${DebPackageVersion}"
          echo "::set-output name=MsBuildVersion::${MsBuildVersion}"
          echo "::set-output name=MajorMinorPatch::${MajorMinorPatch}"
          echo "::set-output name=AssemblySemVer::${AssemblySemVer}"
          echo "::set-output name=AssemblySemFileVer::${AssemblySemFileVer}"
          echo "::set-output name=InformationalVersion::${InformationalVersion}"

      - name: Tag with current version number
        run: echo Would tag with ${TAG}
        env:
          TAG: v${{ steps.version.outputs.MsBuildVersion }}

      - name: Save current version number to an output
        id: output_version_number
        run: echo "::set-output name=TagFor${{matrix.dbversion}}::${TAG}"
        env:
          TAG: v${{ steps.version.outputs.MsBuildVersion }}

      - name: Set up buildx for Docker
        # docker/setup-buildx-action@v1.6.0 is commit 94ab11c41e45d028884a99163086648e898eed25
        uses: docker/setup-buildx-action@94ab11c41e45d028884a99163086648e898eed25

      - name: Find current UID
        id: uid
        run: echo "::set-output name=uid::$(id -u)"

      # - name: Build DBVersion-specific Docker image
      #   # docker/build-push-action@v2.7.0 is commit a66e35b9cbcf4ad0ea91ffcaf7bbad63ad9e0229
      #   uses: docker/build-push-action@a66e35b9cbcf4ad0ea91ffcaf7bbad63ad9e0229
      #   with:
      #     push: false
      #     load: true
      #     tags: lfmerge-build-${{matrix.dbversion}}
      #     context: .
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max
      #     build-args: |
      #       DbVersion=${{matrix.dbversion}}
      #       BUILDER_UID=${{steps.uid.outputs.uid}}

      # - name: Run docker image ls to verify build
      #   run: docker image ls

      # - name: Run the build container
      #   env:
      #     BUILD_NUMBER: ${{ github.run_number }}
      #     DebPackageVersion: ${{ steps.version.outputs.DebPackageVersion }}
      #     MsBuildVersion: ${{ steps.version.outputs.MsBuildVersion }}
      #     MajorMinorPatch: ${{ steps.version.outputs.MajorMinorPatch }}
      #     AssemblySemVer: ${{ steps.version.outputs.AssemblySemVer }}
      #     AssemblySemFileVer: ${{ steps.version.outputs.AssemblySemFileVer }}
      #     InformationalVersion: ${{ steps.version.outputs.InformationalVersion }}
      #   run: docker run --mount type=bind,source="$(pwd)",target=/home/builder/repo --env "BUILD_NUMBER=${BUILD_NUMBER}" --env "DebPackageVersion=${DebPackageVersion}" --env "Version=${MsBuildVersion}" --env "MajorMinorPatch=${MajorMinorPatch}" --env "AssemblyVersion=${AssemblySemVer}" --env "FileVersion=${AssemblySemFileVer}" --env "InformationalVersion=${InformationalVersion}" --name tmp-lfmerge-build-${{matrix.dbversion}} lfmerge-build-${{matrix.dbversion}}

      # - name: Collect tarball images
      # # Now should collect tarballs
      #   run: docker container cp tmp-lfmerge-build-${{matrix.dbversion}}:/home/builder/repo/tarball ./

      # - uses: actions/upload-artifact@v2.2.4
      #   with:
      #     name: lfmerge-tarball
      #     path: tarball
    outputs:
      MajorMinorPatch: ${{ steps.version.outputs.MajorMinorPatch }}
      MsBuildVersion: ${{ steps.version.outputs.MsBuildVersion }}
      TagFor7000068: ${{ steps.output_version_number.outputs.TagFor7000068 }}
      TagFor7000069: ${{ steps.output_version_number.outputs.TagFor7000069 }}
      TagFor7000070: ${{ steps.output_version_number.outputs.TagFor7000070 }}
      TagFor7000072: ${{ steps.output_version_number.outputs.TagFor7000072 }}

  release:
    needs: [calculate_branches, build]
    uses: ./.github/workflows/release.yml
    with:
      MajorMinorPatch: ${{ needs.build.outputs.MajorMinorPatch }}
      MsBuildVersion: ${{ needs.build.outputs.MsBuildVersion }}
      TagFor7000068: ${{ needs.build.outputs.TagFor7000068 }}
      TagFor7000069: ${{ needs.build.outputs.TagFor7000069 }}
      TagFor7000070: ${{ needs.build.outputs.TagFor7000070 }}
      TagFor7000072: ${{ needs.build.outputs.TagFor7000072 }}
