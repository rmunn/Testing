name: Build master

on: [push, pull_request]

jobs:
  build:

    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v1

    - name: Run git describe
      id: describe
      run: git describe --long

    - name: Calculate version number
      id: versionnum
      env:
        BUILD_NUMBER: ${{ github.run_number }}
      run: |
        echo Start
        REV=${GITHUB_REF:-$(git rev-parse --symbolic-full-name HEAD)}
        DESCRIBE=$(git describe --long --match "v*")
        MAJOR=$(echo "$DESCRIBE" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+).*$/\1/')
        MINOR=$(echo "$DESCRIBE" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+).*$/\2/')
        PATCH=$(echo "$DESCRIBE" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+).*$/\3/')
        # TODO: Detect need for minor/major updates and increment those instead of PATCH
        PATCH=$((${PATCH} + 1))
        COMMIT_COUNT=$(echo "$DESCRIBE" | sed -E 's/^[^-]+-([^-]+)-.*$/\1/')
        COMMIT_HASH=$(echo "$DESCRIBE" | sed -E 's/^[^-]+-[^-]+-g(.*)$/\1/')
        MajorMinorPatch="${MAJOR}.${MINOR}.${PATCH}"
        AssemblySemVer="${MajorMinorPatch}.${BUILD_NUMBER}"
        AssemblySemFileVer="${MajorMinorPatch}.0"
        InformationalVersion="${DESCRIBE}"
        echo "Calculating name from ${REV}"
        if [ -z ${REV} ]; then
          echo Failed to get a meaningful commit name
        fi
        echo Got commit name ${REV}
        RESULT=notfound
        if echo "${REV}" | grep -E '^refs/pull/'; then
          echo Found PR
          RESULT=$(echo "${REV}" | sed -E 's/^refs\/pull\/([0-9]+)\/merge/\1/')
        fi
        if echo "${REV}" | grep -E '^refs/heads/'; then
          echo Found branch
          RESULT=$(echo "${REV}" | sed -E 's/^refs\/heads\///')
        fi
        if echo "${REV}" | grep -E '^refs/tags/'; then
          echo Found tag
          RESULT=$(echo "${REV}" | sed -E 's/^refs\/tags\///')
        fi
        echo Will calculate version from "${RESULT}" and "${MAJOR}.${MINOR}.${PATCH} with $COMMIT_COUNT commits since then, and current hash $COMMIT_HASH"

        case "$REV" in
          refs/heads/master | refs/heads/fieldworks8-master)
            PRERELEASE="~alpha.${BUILD_NUMBER}"
            ;;

          refs/heads/qa | refs/heads/fieldworks8-qa)
            PRERELEASE="~beta.${BUILD_NUMBER}"
            ;;

          refs/heads/live | refs/heads/fieldworks8-live)
            PRERELEASE=
            ;;

          refs/pull/*)
            PR_NUMBER=$(echo "${REV}" | sed -E 's/^refs\/pull\/([0-9]+)\/merge/\1/')
            PRERELEASE="~PR${PR_NUMBER}.${BUILD_NUMBER}"
            ;;

          refs/heads/*)
            PRERELEASE="~${REV##refs/heads/}.${BUILD_NUMBER}"
            ;;

          *)
            echo "Could not determine version number from ${REV}"
            echo "::error ::Could not determine version number from ${REV}"
            exit 1

        esac
        DebPackageVersion=${MAJOR}.${MINOR}.${PATCH}${PRERELEASE}
        MsBuildVersion=$(echo "${DebPackageVersion}" | sed 's/~/-/')
        echo "Will build package version ${DebPackageVersion}"
        echo "::set-output name=DebPackageVersion::${DebPackageVersion}"
        echo "::set-output name=MsBuildVersion::${MsBuildVersion}"
        echo "::set-output name=MajorMinorPatch::${MajorMinorPatch}"
        echo "::set-output name=AssemblySemVer::${AssemblySemVer}"
        echo "::set-output name=AssemblySemFileVer::${AssemblySemFileVer}"
        echo "::set-output name=InformationalVersion::${InformationalVersion}"

    - name: Collect build output
      env:
        MajorMinorPatch: ${{ steps.versionnum.outputs.MajorMinorPatch }}
      run: |
        echo "# Version ${MajorMinorPatch}" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "Release notes for ${MajorMinorPatch} go here" >> RELEASE_NOTES.md

    - name: Upload release notes
      uses: actions/upload-artifact@v2
      with:
        name: release-notes
        path: RELEASE_NOTES.md

    outputs:
      DebPackageVersion: ${{ steps.versionnum.outputs.DebPackageVersion }}
      MajorMinorPatch: ${{ steps.versionnum.outputs.MajorMinorPatch }}

  release:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/heads/master')
    steps:
    - name: Get output
      env:
        DebPackageVersion: ${{needs.build.outputs.DebPackageVersion}}
        MajorMinorPatch: ${{needs.build.outputs.MajorMinorPatch}}
      run: echo "Will build ${MajorMinorPatch}"

    - name: Tag new release
      env:
        MajorMinorPatch: ${{needs.build.outputs.MajorMinorPatch}}
      run: echo git tag -s -m "Release v${MajorMinorPatch}" "v${MajorMinorPatch}"

    - name: Download release notes
      uses: actions/download-artifact@v2
      with:
        name: release-notes
        path: RELEASE_NOTES.md

    - name: Create GitHub release
      env:
        MajorMinorPatch: ${{needs.build.outputs.MajorMinorPatch}}
      run: echo "Release notes for v${MajorMinorPatch} follow:\n$(cat RELEASE_NOTES.md)"
