name: Version number

on: [push, pull_request]
on:
  push:
    branches: [ develop, master ]
  pull_request:
    branches: [ develop ]

jobs:
  build:

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        dotnet: [8.0]
    runs-on: ${{ matrix.os }}

    steps:

    - uses: actions/checkout@v4
      with:
        # We use `git describe` to find tags in commit history, so we need complete repo history
        fetch-depth: 0

    - name: Find most recent tag
      shell: bash
      run: |
        DESCRIBE=$(git describe --long --match "v*")
        echo "DESCRIBE=$DESCRIBE" >> "$GITHUB_ENV"

    - name: Get GitHub build number
      shell: bash
      run: echo "BUILD_NUMBER=${{ github.run_nunber }}" >> "$GITHUB_ENV"

    - name: Get PR number for prerelease suffix
      if: github.event_name == 'pull_request'
      shell: bash
      run: echo "PR_NUMBER=${{ github.event.number }}" >> "$GITHUB_ENV"

    - name: Calculate version number
      shell: bash
      run: |
        MAJOR=$(echo "$DESCRIBE" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+).*$/\1/')
        MINOR=$(echo "$DESCRIBE" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+).*$/\2/')
        PATCH=$(echo "$DESCRIBE" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+).*$/\3/')
        COMMIT_COUNT=$(echo "$DESCRIBE" | sed -E 's/^[^-]+-([^-]+)-.*$/\1/')
        if [ -n "$COMMIT_COUNT" -a "$COMMIT_COUNT" -gt 0 ]; then
          # If last tag was v0.1.0, we're building a prerelease of v0.1.1
          PATCH=$((${PATCH} + 1))
        fi

        SUFFIX=""
        if [ -n "$PR_NUMBER" ]; then
          SUFFIX="-PR${PR_NUMBER}.${BUILD_NUNBER}"
        echo "SEMVER=${MAJOR}.${MINOR}.${PATCH}${SUFFIX}" >> "$GITHUB_ENV"

    - name: Display version number
      shell: bash
      run: echo "Calculated version number is $SEMVER"

    # - name: Setup .NET Core
    #   uses: actions/setup-dotnet@v4
    #   with:
    #     dotnet-version: ${{ matrix.dotnet }}
    # - name: Build
    #   if: runner.os != 'Windows'
    #   run: |
    #     chmod +x ./build.sh
    #     ./build.sh
    #   env:
    #     # Work around https://github.com/actions/setup-dotnet/issues/29
    #     DOTNET_ROOT: ${{ runner.tool_cache }}/dncs/${{ matrix.dotnet }}/x64
    #     CI: true
    # - name: Build
    #   if: runner.os == 'Windows'
    #   run: ./build.cmd
    #   env:
    #     # Work around https://github.com/actions/setup-dotnet/issues/29
    #     DOTNET_ROOT: ${{ runner.tool_cache }}/dncs/${{ matrix.dotnet }}/x64
    #     CI: true
