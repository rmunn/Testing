name: Version number

on:
  push:
    # Note: master/main is NOT included here
    branches: [ develop ]
    tags:
      - v*
  pull_request:
    branches: [ develop ]

jobs:
  build:

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        dotnet: [8.0]
    runs-on: ${{ matrix.os }}

    steps:

    - uses: actions/checkout@v4
      with:
        # We use `git describe` to find tags in commit history, so we need complete repo history
        fetch-depth: 0

    - name: Find most recent tag
      shell: bash
      run: |
        DESCRIBE=$(git describe --long --match "v*")
        TAG=$(echo "$DESCRIBE" | grep -E -o '^v[0-9]+\.[0-9]+\.[0-9]+')
        echo "DESCRIBE=$DESCRIBE" >> "$GITHUB_ENV"
        echo "TAG=$TAG" >> "$GITHUB_ENV"

    - name: Split version number from tag into major/minor/patch sections
      shell: bash
      run: |
        MAJOR=$(echo "$TAG" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+)$/\1/')
        MINOR=$(echo "$TAG" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+)$/\2/')
        PATCH=$(echo "$TAG" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+)$/\3/')
        echo "MAJOR=$MAJOR" >> "$GITHUB_ENV"
        echo "MINOR=$MINOR" >> "$GITHUB_ENV"
        echo "PATCH=$PATCH" >> "$GITHUB_ENV"

    - name: Get GitHub build number
      shell: bash
      run: echo "BUILD_NUMBER=${{ github.run_number }}" >> "$GITHUB_ENV"

    - name: Get PR number for prerelease suffix
      if: github.event_name == 'pull_request'
      shell: bash
      run: echo "PR_NUMBER=${{ github.event.number }}" >> "$GITHUB_ENV"

    - name: Calculate prerelease suffix
      shell: bash
      run: |
        SUFFIX=""
        if [ -n "$PR_NUMBER" ]; then
          SUFFIX="-PR${PR_NUMBER}.${BUILD_NUMBER}"
        elif [ "$GITHUB_REF" = "refs/heads/develop" ]; then
          SUFFIX="-beta.${BUILD_NUMBER}"
        fi

        echo "SUFFIX=$SUFFIX" >> "$GITHUB_ENV"

    - name: Calculate version number bump
      # Same logic as GitVersion:
      # * "+semver: breaking" or "+semver: major" in commit log will produce major version bump (and reset minor and patch to 0)
      # * "+semver: feature" or "+semver: minor" in commit log will produce minor version bump (and reset patch to 0)
      # Default is to bump the patch version
      shell: bash
      # Git log format "%B" is the raw body with no author's email or anything else
      run: |
        COMMIT_COUNT=$(echo "$DESCRIBE" | sed -E 's/^[^-]+-([^-]+)-.*$/\1/')
        if [ -n "$COMMIT_COUNT" -a "$COMMIT_COUNT" -gt 0 ]; then
          # Calculate bump based on commit messages
          RAW_LOG=$(git log --format="%B" "$TAG"..HEAD)
          if grep -E '\+semver: (breaking|major)' <<< "$RAW_LOG"; then
            MAJOR=$(($MAJOR + 1))
            MINOR=0
            PATCH=0
          elif grep -E '\+semver: (feature|minor)' <<< "$RAW_LOG"; then
            MINOR=$(($MINOR + 1))
            PATCH=0
          else
            PATCH=$(($PATCH + 1))
          fi
        fi

        echo "SEMVER=${MAJOR}.${MINOR}.${PATCH}${SUFFIX}" >> "$GITHUB_ENV"

    - name: Display version number
      shell: bash
      run: echo "Calculated version number is $SEMVER"

    # - name: Setup .NET Core
    #   uses: actions/setup-dotnet@v4
    #   with:
    #     dotnet-version: ${{ matrix.dotnet }}
    # - name: Build
    #   if: runner.os != 'Windows'
    #   run: |
    #     chmod +x ./build.sh
    #     ./build.sh
    #   env:
    #     # Work around https://github.com/actions/setup-dotnet/issues/29
    #     DOTNET_ROOT: ${{ runner.tool_cache }}/dncs/${{ matrix.dotnet }}/x64
    #     CI: true
    # - name: Build
    #   if: runner.os == 'Windows'
    #   run: ./build.cmd
    #   env:
    #     # Work around https://github.com/actions/setup-dotnet/issues/29
    #     DOTNET_ROOT: ${{ runner.tool_cache }}/dncs/${{ matrix.dotnet }}/x64
    #     CI: true
